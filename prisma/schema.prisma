generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model globalConfig {
  id           String  @id @unique @default(uuid())
  active       Boolean
  demoClubId   String
  demoSeriesId String
  demoDataId   String
  demoUUID     String
}

model User {
  id              String    @id @unique @default(uuid())
  username        String    @default("")
  uuid            String?   @unique
  startPage       String
  admin           Boolean   @default(false)
  name            String    @default("")
  email           String
  emailVerified   Boolean
  image           String?   @db.Text
  createdAt       DateTime
  updatedAt       DateTime
  displayUsername String?   @db.Text
  sessions        Session[]
  accounts        Account[]
  clubId          String?
  club            Club?     @relation(fields: [clubId], references: [id])
  roles           Role[]    @relation("RoleToUser")

  @@unique([email])
  @@map("user")
}

model Role {
  id          String @id @unique @default(uuid())
  name        String
  clubId      String
  permissions Json
  club        Club   @relation(fields: [clubId], references: [id])
  users       User[] @relation("RoleToUser")

  @@index([clubId])
}

model Boat {
  id               String          @id @unique @default(uuid())
  name             String
  crew             Int
  py               Int
  pursuitStartTime Int
  clubId           String
  club             Club            @relation(fields: [clubId], references: [id])
  results          Result[]
  fleets           FleetSettings[] @relation("BoatToFleetSettings")

  @@index([clubId])
}

model Club {
  id               String    @id @unique @default(uuid())
  name             String    @unique
  settings         Json
  displayName      String?
  boats            Boat[]
  Buoy             Buoy[]
  roles            Role[]
  series           Series[]
  Trackers         Tracker[]
  stripe           Stripe?   @relation(fields: [stripeCustomerId], references: [customerId])
  stripeCustomerId String?
  users            User[]
  userId           String?   @unique
}

model Stripe {
  customerId String @id @unique

  subscriptionId     String?
  productId          String?
  planName           String?
  subscriptionStatus String?
  updatedAt          String?
  Club               Club[]
}

model Series {
  id             String          @id @unique @default(uuid())
  name           String
  clubId         String
  settings       Json
  fleetSettings  FleetSettings[]
  races          Race[]
  club           Club            @relation(fields: [clubId], references: [id], onDelete: Cascade)
  startSequences StartSequence[]

  @@index([clubId])
}

model StartSequence {
  id         String @id @unique @default(uuid())
  series     Series @relation(fields: [seriesId], references: [id])
  seriesId   String
  time       Int
  name       String
  hoot       Int
  fleetStart String
  flagStatus Json
  order      Int

  // @@unique([seriesId, order]) // Ensures unique order numbers per race //this is commented out to allow multiple actions at the same time
}

model Race {
  id       String  @id @unique @default(uuid())
  number   Int
  Time     String
  Type     String
  seriesId String
  Duties   Json
  fleets   Fleet[]
  series   Series  @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@index([seriesId])
}

model FleetSettings {
  id       String  @id @unique @default(uuid())
  seriesId String
  name     String
  fleets   Fleet[]
  series   Series  @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  boats    Boat[]  @relation("BoatToFleetSettings")

  @@index([seriesId])
}

model Fleet {
  id            String        @id @unique @default(uuid())
  raceId        String
  startTime     Int
  settingsId    String
  race          Race          @relation(fields: [raceId], references: [id], onDelete: Cascade)
  fleetSettings FleetSettings @relation(fields: [settingsId], references: [id])
  results       Result[]

  @@index([raceId])
  @@index([settingsId])
}

model Result {
  id               String  @id @unique @default(uuid())
  fleetId          String?
  Helm             String
  Crew             String
  boatId           String?
  SailNumber       String
  finishTime       Int
  CorrectedTime    Float
  HandicapPosition Int
  PursuitPosition  Int
  isDeleted        Boolean
  resultCode       String
  numberLaps       Int
  laps             Lap[]
  boat             Boat?   @relation(fields: [boatId], references: [id])
  fleet            Fleet?  @relation(fields: [fleetId], references: [id], onDelete: Cascade)

  @@index([fleetId])
  @@index([boatId])
}

model Lap {
  id        String  @id @unique @default(uuid())
  resultId  String
  time      Int
  isDeleted Boolean
  result    Result  @relation(fields: [resultId], references: [id])

  @@index([resultId])
}

model Tracker {
  trackerID String @id @unique
  clubId    String
  name      String
  club      Club   @relation(fields: [clubId], references: [id])

  @@index([clubId])
}

model Buoy {
  id         String  @id @unique @default(uuid())
  name       String
  clubId     String
  pos        Json
  isMoveable Boolean
  trackerID  String
  club       Club    @relation(fields: [clubId], references: [id])

  @@index([clubId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
